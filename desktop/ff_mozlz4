#!/usr/bin/env python3

import os, sys, contextlib, pathlib, logging, tempfile
import lz4.block # https://python-lz4.readthedocs.io/


class LogMessage(object):
	def __init__(self, fmt, a, k): self.fmt, self.a, self.k = fmt, a, k
	def __str__(self): return self.fmt.format(*self.a, **self.k) if self.a or self.k else self.fmt

class LogStyleAdapter(logging.LoggerAdapter):
	def __init__(self, logger, extra=None):
		super(LogStyleAdapter, self).__init__(logger, extra or {})
	def log(self, level, msg, *args, **kws):
		if not self.isEnabledFor(level): return
		log_kws = {} if 'exc_info' not in kws else dict(exc_info=kws.pop('exc_info'))
		msg, kws = self.process(msg, kws)
		self.logger._log(level, LogMessage(msg, args, kws), (), log_kws)

get_logger = lambda name: LogStyleAdapter(logging.getLogger(name))


def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Compress/decompress mozlz4 files.')

	parser.add_argument('path', nargs='?',
		help='File(s) to operate on. Used with -c/--compress or -d/--decompress options.'
			' By default,'
				'--compress will write a new file with .mozlz4 suffix, removing the old one,'
				' and --decompress will remove .mozlz4 suffix and compressed file, if present.'
			' If not path is specified, stdin/stdout will be used.')

	parser.add_argument('-c', '--compress', action='store_true',
		help='Compress specified file or stdin stream. Default for paths that dont end with .mozlz4.')
	parser.add_argument('-d', '--decompress', action='store_true',
		help='Decompress specified file or stdin stream. Default for stdin with mozLz40 header.')

	parser.add_argument('-o', '--stdout', action='store_true',
		help='Compress/decompress to stdout, even when file path is specified.')

	parser.add_argument('--debug', action='store_true', help='Verbose operation mode.')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	global log
	logging.basicConfig(level=logging.DEBUG if opts.debug else logging.WARNING)
	log = get_logger('main')

	if opts.compress and opts.decompress:
		parser.error('Both --compress and --decompress at the same time make no sense.')

	src = dst = dst_path = dst_tmp = chunk = None
	try:
		if opts.path:
			if opts.path.endswith('.mozlz4'):
				if opts.compress:
					log.warning( 'Specified path already have'
						' .mozlz4 suffix, will be compressed twice: {}', opts.path )
				elif not opts.decompress: opts.decompress = True
			elif not (opts.compress or opts.decompress): opts.compress = True
			assert opts.compress ^ opts.decompress == 1
			src = open(opts.path, 'rb')
			if opts.stdout: dst = os.fdopen(sys.stdout.fileno(), 'wb')
			else:
				dst_path = opts.path
				if opts.compress: dst_path += '.mozlz4'
				elif dst_path.endswith('.mozlz4'): dst_path = dst_path[:-7]
				dst_path = pathlib.Path(dst_path)
				dst = tempfile.NamedTemporaryFile(
					delete=False, dir=str(dst_path.parent), prefix=str(dst_path.name)+'.' )
				dst_tmp = pathlib.Path(dst.name)
				log.debug('Dst path: {!r}, tmp path: {!r}', bytes(dst_path), bytes(dst_tmp))
		else:
			src, dst = open(sys.stdin.fileno(), 'rb'), open(sys.stdout.fileno(), 'wb')
			if not opts.compress:
				chunk = src.read(8)
				if not opts.decompress:
					opts.decompress = chunk == b'mozLz40\0'
					if not opts.decompress:
						log.debug('Assuming --compress due to lack of mozLz40 header in stdin')
						opts.compress = True

		assert opts.compress ^ opts.decompress == 1

		data = (chunk or b'') + src.read()
		log.debug( 'Starting lz4-op (c={}, d={}),'
			' src ({}) data len: {}', opts.compress, opts.decompress, src, len(data) )
		if opts.compress: data = b'mozLz40\0' + lz4.block.compress(data)
		if opts.decompress: data = lz4.block.decompress(data[8:])
		log.debug( 'lz4-op complete (c={}, d={}),'
			' dst ({}) data len: {}', opts.compress, opts.decompress, dst, len(data) )
		dst.write(data)
		dst.flush()

		if dst_tmp:
			os.rename(dst_tmp.name, bytes(dst_path))
			if src.name:
				with contextlib.suppress(OSError): os.unlink(src.name)
			dst_path = None

	finally:
		if src: src.close()
		if dst_tmp:
			if dst_path:
				with contextlib.suppress(OSError): os.unlink(bytes(dst_tmp))
			if dst: dst.close()

if __name__ == '__main__': sys.exit(main())
