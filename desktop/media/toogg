#!/usr/bin/env python3

import itertools as it, operator as op, functools as ft
from collections import OrderedDict, namedtuple
from asyncio import subprocess
import os, sys, re, logging, pathlib
import contextlib, asyncio, signal, json, tempfile, shutil


class LogMessage:
	def __init__(self, fmt, a, k): self.fmt, self.a, self.k = fmt, a, k
	def __str__(self): return self.fmt.format(*self.a, **self.k) if self.a or self.k else self.fmt

class LogStyleAdapter(logging.LoggerAdapter):
	def __init__(self, logger, extra=None):
		super(LogStyleAdapter, self).__init__(logger, extra or {})
	def log(self, level, msg, *args, **kws):
		if not self.isEnabledFor(level): return
		log_kws = {} if 'exc_info' not in kws else dict(exc_info=kws.pop('exc_info'))
		msg, kws = self.process(msg, kws)
		self.logger._log(level, LogMessage(msg, args, kws), (), log_kws)

get_logger = lambda name: LogStyleAdapter(logging.getLogger(name))

err_with_type = lambda err: (err.__class__.__name__, err)


class FFProc:

	proc = finished = None
	stream_reader_limit = 32 * 2**10
	prefix, crop_mark = '', '... ¯\_(ツ)_/¯'

	def __init__( self, loop, src, cmd,
			stream_len=None, progress_func=None, prefix=None, limit=None, **kws ):
		self.loop, self.src, self.cmd, self.kws = loop, src, cmd, kws
		self.progress_func, self.stream_len = progress_func, stream_len
		self.term_width = shutil.get_terminal_size()[0] - 2
		if prefix: self.prefix = prefix
		self.line_max_len = self.kws['limit'] = limit or self.stream_reader_limit
		self.cmd_repr = ' '.join((v if len(v.split()) == 1 else repr(v)) for v in cmd)

	async def __aenter__(self):
		await self.run(wait=False)
		return self

	async def __aexit__(self, *err):
		if self.finished and not self.finished.done():
			self.finished.cancel()
			with contextlib.suppress(asyncio.CancelledError): await self.finished


	async def run(self, wait=True):
		assert not self.proc
		log.debug('[{!r}] running: {}', self.src, self.cmd_repr)
		if self.progress_func: self.kws['stdout'] = subprocess.PIPE
		self.proc = await asyncio.create_subprocess_exec(*self.cmd, **self.kws)
		for k in 'stdin', 'stdout', 'stderr': setattr(self, k, getattr(self.proc, k))
		self.finished = self.loop.create_task(self.wait())
		if wait: await self.finished
		return self

	async def wait(self):
		progress_task = None
		if self.progress_func and self.proc.stdout:
			progress_task = self.loop.create_task(self.print_progress())
		try:
			await self.proc.wait()
			if progress_task: await progress_task
			if self.proc.returncode != 0:
				cmd_repr = '' if not self.cmd_repr else ': {}'.format(self.cmd_repr)
				raise AudioConvError(( 'Command for src {!r} exited with'
					' non-zero status ({}){}' ).format(self.src, self.proc.returncode, cmd_repr))
		finally:
			if progress_task and not progress_task.done():
				progress_task.cancel()
				with contextlib.suppress(asyncio.CancelledError): await progress_task


	async def readline(self, stream=None, sep=b'\n',
			decode_enc='utf-8', decode_err='replace', crop_to=8 * 2**10, crop_mark=None):
		'''Similar to StreamReader.readline, but also:
				- Decodes all lines (with `decode_enc` and `decode_err` opts).
				- Lines that are longer than `crop_to` (after decoding)
					are cropped to that limit and `crop_mark` is appended.
				- StreamReader `limit` is not an issue -
					line tails above that are cropped-out and discarded.'''
		if not stream: stream = self.stdout
		elif isinstance(stream, str): stream = getattr(self, stream)
		assert crop_to <= self.line_max_len
		crop_mark = crop_mark or self.crop_mark

		try: line = await stream.readuntil(sep)
		except asyncio.IncompleteReadError as err: line = err.partial
		except asyncio.LimitOverrunError:
			line = await stream.read(self.line_max_len)
			while True:
				try: await stream.readuntil(sep)
				except asyncio.IncompleteReadError: break
				except asyncio.LimitOverrunError: await stream.read(self.line_max_len)
				else: break

		line = line.decode(decode_enc, decode_err)
		if len(line) > crop_to: line = line[:crop_to] + crop_mark
		return line


	def print_progress_prefix(self, msg):
		prefix_max_len = self.term_width - len(msg)
		if prefix_max_len >= len(self.prefix) + 10:
			prefix_len, prefix = prefix_max_len - len(self.prefix) - 6, repr(self.src)
			if len(prefix) > prefix_len: prefix = prefix[:prefix_len]
			prefix = ' '.join(filter(None, [f'[{prefix}]', self.prefix]))
			msg = f'{prefix}: {msg}'
		elif prefix_max_len > 3: msg = '{}: {}'.format(self.prefix[:prefix_max_len-2], msg)
		else: msg = msg[:self.term_width]
		return msg

	async def print_progress(self):
		report, pos_str = dict(), lambda n:\
			'{:02d}:{:02d}:{:02d}'.format(*map(int, [n//3600, (n%3600)//60, n%60]))
		print_progress = ft.partial(self.progress_func, (self.src, self.prefix))
		try:
			while True:
				line = await self.readline()
				if not line: return
				k, v = line.split('=', 1)
				report[k] = v
				if k != 'progress': continue
				pos = int(report.get('out_time_ms', 0)) / 1000000
				if not pos: continue
				# XXX: handle multiple files somehow
				if not self.stream_len: msg = pos_str(pos)
				else:
					msg = '{:.1f}% - {} / {}'.format(
						(pos / self.stream_len) * 100, pos_str(pos), pos_str(self.stream_len) )
				msg = self.print_progress_prefix(msg)
				print_progress(msg)
		finally: print_progress()


class YTDLProc(FFProc):

	prefix = 'ytdl'

	async def print_progress(self):
		print_progress = ft.partial(self.progress_func, (self.src, self.prefix))
		try:
			while True:
				line = await self.readline()
				if not line: return
				if not line.startswith('[download]'): continue
				msg = self.print_progress_prefix(f'{line[10:].strip()}')
				print_progress(msg)
		finally: print_progress()




class AudioConvError(Exception): pass

class AudioConvJob:
	__slots__ = 'name src dst input_opts tmp_file ffmpeg can_copy_stream'.split()
	def __init__(self, *args, **kws):
		for k,v in it.chain(zip(self.__slots__, args), kws.items()): setattr(self, k, v)

class AudioConv:

	@classmethod
	async def run_async(cls, *args, **kws):
		async with cls(*args, **kws) as self: return await self.run()

	def __init__(self, loop, src_list,
			start=None, length=None, loudnorm=False,
			loudnorm_opts=None, ytdl_opts=None, max_parallel=None ):
		self.loop, self.src_list, self.max_parallel = loop, src_list, max_parallel or os.cpu_count()
		self.start, self.length = start, length
		self.loudnorm, self.loudnorm_opts = loudnorm, loudnorm_opts or ''
		self.ytdl_opts = ytdl_opts or list()
		self.status_lines = dict()

	async def __aenter__(self):
		self.conv_jobs, self.status_line_task = OrderedDict(), None
		self.success, self.src_done, self.exit_sig = False, OrderedDict(), None
		return self

	async def __aexit__(self, *err):
		if self.conv_jobs:
			await self.conv_cleanup()
		if self.status_line_task:
			self.status_line_task.cancel()
			await self.status_line_task
			self.status_line_task = None

	async def run(self):
		self.conv = self.loop.create_task(self.conv_list())
		self.status_line_task = self.loop.create_task(self.status_line_cycle())
		def sig_handler(sig):
			self.exit_sig = sig
			self.conv.cancel()
		for sig in 'int', 'term':
			self.loop.add_signal_handler(
				getattr(signal, 'SIG{}'.format(sig.upper())), ft.partial(sig_handler, sig) )
		with contextlib.suppress(asyncio.CancelledError): await self.conv
		return self.success


	async def status_line_cycle(self, interval=1.0):
		status_queue, term_width = list(), shutil.get_terminal_size()[0] - 2
		term_pad = lambda line: (
			(line + ' '*max(0, term_width - len(line)))\
				if len(line) < term_width else line[:term_width] )
		while True:
			if self.status_lines:
				if not status_queue: status_queue.extend(sorted(self.status_lines))
				k = status_queue.pop()
				try: line, end = self.status_lines[k], ''
				except KeyError: continue
				if line.endswith('\n'): # final status for this key
					line, end = line.rstrip('\n'), '\n'
					del self.status_lines[k]
				print('\r' + term_pad(line), end=end, flush=True)
			try: await asyncio.sleep(interval)
			except asyncio.CancelledError:
				for k in it.chain(status_queue, list(self.status_lines)):
					line = self.status_lines.pop(k, None)
					if line: print('\r' + term_pad(line.rstrip('\n')), end='\n', flush=True)
				break

	def status_line_set(self, key, line=None):
		if line: self.status_lines[key] = line
		elif key in self.status_lines: self.status_lines[key] += '\n'


	async def conv_cleanup(self, *src, raise_errors=False):
		if not src: src = list(self.conv_jobs.keys())
		for src in src:
			conv = self.conv_jobs.pop(src)
			conv.cancel()
			try: await conv
			except asyncio.CancelledError: pass
			except Exception as err:
				log.exception('conv-job crashed during cleanup: [{}] {}', *err_with_type(err))
				if raise_errors: raise

	async def conv_list(self):
		src_iter = iter(self.src_list)
		while True:
			while src_iter and len(self.conv_jobs) < self.max_parallel:
				try: src = next(src_iter)
				except StopIteration:
					src_iter = None
					break
				log.debug('Scheduling new conv-job for src: {}', src)
				conv = self.conv_jobs[src] = self.loop.create_task(self.conv_src(src))
				conv.src = src
			if not self.conv_jobs: break

			done, pending = await asyncio.wait(
				self.conv_jobs.values(), return_when=asyncio.FIRST_COMPLETED )
			for res in done:
				dst_path = await res
				log.debug('conv-job done (dst file: {!r}) for src: {!r}', dst_path, src)
				await self.conv_cleanup(res.src, raise_errors=True)
				self.src_done[res.src] = dst_path

		assert len(self.src_done) == len(self.src_list)
		self.success = True


	async def conv_src(self, src):
		paths = set()

		if not isinstance(src, pathlib.Path):
			url, ytdl_opts = src, self.ytdl_opts
			if not ytdl_opts:
				ytdl_opts = ['-f', '171/bestaudio[ext=ogg]/bestaudio[ext=webm]/bestaudio/480p/best']
			ytdl_opts = ['youtube-dl', '--newline'] + ytdl_opts
			async with YTDLProc( self.loop, url,
					ytdl_opts + ['--get-filename', url],
					stdout=subprocess.PIPE ) as proc:
				src = (await proc.stdout.read()).strip().decode()
				await proc.finished
			if not src or '\n' in src:
				raise AudioConvError(f'Weird output from "youtube-dl --get-filename": {src!r}')
			src = pathlib.Path(src)
			try:
				async with YTDLProc( self.loop, src.name,
						ytdl_opts + [url], progress_func=self.status_line_set ) as proc:
					await proc.finished
			finally:
				with contextlib.suppress(OSError): os.unlink(src.with_suffix('.part'))
			paths.add(src)

		dst = src.name.rsplit('.', 1)[0] + '.ogg'
		paths.add(dst)

		def tmp_file(ext):
			p = '{}.{}'.format(dst, ext)
			paths.add(p)
			return p

		job_input_opts = list()
		if self.start: job_input_opts.extend(['-ss', str(self.start)])
		if self.length: job_input_opts.extend(['-t', str(self.length)])
		job = AudioConvJob(src.name, src, dst, job_input_opts, tmp_file)

		async with FFProc( self.loop, job.name,
				[ 'ffprobe', '-v', 'error', '-show_entries',
					'stream=codec_type,codec_name,duration:format=duration',
					'-print_format', 'json', str(src) ],
				stdout=subprocess.PIPE ) as proc:
			src_info = (await proc.stdout.read()).decode()
			await proc.finished
			src_duration = src_codec = None
			try:
				src_info = json.loads(src_info)
				for stream in src_info['streams']:
					if stream.get('codec_type') != 'audio': continue
					src_duration = float(stream.get('duration', 0))
					src_codec = stream.get('codec_name')
					break
				if not src_duration:
					src_duration = float(src_info['format']['duration'])
			except Exception as err:
				log.error( '[{!r}] ffprobe failed, progress'
					' info wont be available: [{}] {}', job.name, *err_with_type(err) )
			if src_duration:
				if self.start: src_duration = max(0, src_duration - self.start)
				if self.length: src_duration = min(src_duration, self.length)
			log.debug('[{!r}] Detected audio stream duration: {:.1f}s', job.name, src_duration)
			log.debug('[{!r}] Detected audio stream codec: {!r}', job.name, src_codec)

		ffmpeg_cmd = ['ffmpeg', '-v', 'error', '-hide_banner', '-y', '-progress', 'pipe:1']
		job.ffmpeg = lambda pre, cmd_ext, **kws: FFProc(
			self.loop, src.name, ffmpeg_cmd + cmd_ext, stream_len=src_duration,
			prefix=pre, progress_func=self.status_line_set, **kws )
		job.can_copy_stream = src_codec == 'vorbis'

		func = self.conv_src_simple if not self.loudnorm else self.conv_src_loudnorm
		try:
			await func(job)
			paths.remove(dst)
		finally:
			for p in paths:
				with contextlib.suppress(OSError): os.unlink(p)
		return dst


	async def conv_src_simple(self, job):
		coding_opts = ['-vn']
		if job.can_copy_stream: coding_opts += ['-codec:a', 'copy']
		await job.ffmpeg( 'to-ogg', ['-i', str(job.src)]
			+ job.input_opts + coding_opts + ['-f', 'ogg', job.dst] ).run()

	async def conv_src_loudnorm(self, job):
		await job.ffmpeg( 'to-wav [1/3]',
			['-i', str(job.src)] + job.input_opts + ['-f', 'wav', job.tmp_file('src.wav')] ).run()

		ffmpeg_env = os.environ.copy()
		ffmpeg_env['NO_COLOR'] = '1'
		opts = self.loudnorm_opts.strip(':')
		if opts: opts += ':'

		async with job.ffmpeg( 'loudnorm-info [2/3]',
				[ '-v', 'info', '-i', job.tmp_file('src.wav'),
					'-af', 'loudnorm={}print_format=json'.format(opts), '-f', 'null', '/dev/null' ],
				env=ffmpeg_env, stderr=subprocess.PIPE ) as proc:
			norm_info, ffmpeg_stderr = list(), list()
			while True:
				line = await proc.readline('stderr')
				ffmpeg_stderr.append(line.rstrip())
				if not line: break
				line = line.strip()
				if norm_info:
					assert not line.endswith(proc.crop_mark)
					norm_info.append(line)
					if line == '}': break
				if re.search(r'^\[Parsed_loudnorm_0 @ 0x[0-f]+\]$', line): norm_info.append('')
			norm_info = ''.join(norm_info)
			try: await proc.finished
			except:
				log.error(
					'ffmpeg stderr:\n--------------------\n{}\n--------------------',
					'\n'.join(ffmpeg_stderr).rstrip() )
				raise
			log.debug('[{!r}] detected audio normalization info: {!r}', job.name, norm_info)
			if not norm_info:
				raise AudioConvError( 'ffmpeg failed to produce'
					' normalization info json (source file: {!r})'.format(job.name) )
			norm_info = json.loads(norm_info)
			with open(job.tmp_file('loudnorm.json'), 'w') as dst:
				json.dump(norm_info, dst, sort_keys=True, indent=2, separators=(',', ': '))

		opts_ext = (
				'measured_I={}:measured_TP={}:'
				'measured_LRA={}:measured_thresh={}:offset={}'
			).format(*op.itemgetter(
				'input_i', 'input_tp', 'input_lra', 'input_thresh', 'target_offset' )(norm_info))
		await job.ffmpeg( 'to-ogg [3/3]', [ '-i', job.tmp_file('src.wav'), '-af',
				'loudnorm={}{}'.format(opts, opts_ext), '-ar', '48k', '-f', 'ogg', job.dst ]).run()


def parse_pos_spec(pos):
	if not pos: return
	try: mins, secs = pos.rsplit(':', 1)
	except ValueError: hrs, mins, secs = 0, 0, pos
	else:
		try: hrs, mins = mins.rsplit(':', 1)
		except ValueError: hrs = 0
	return sum( a*b for a, b in
		zip([3600, 60, 1], map(float, [hrs, mins, secs])) )

def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Convert source file(s) to audio, normalize it and encode to ogg/vorbis.'
			' Optionally uses ffmpeg "loudnorm" filter: https://ffmpeg.org/ffmpeg-all.html#loudnorm')

	group = parser.add_argument_group('Source/destination')
	group.add_argument('src', nargs='+',
		help='File(s) or URL(s) to convert.'
			' Files that both dont exist and have ":" in the name'
				' will be treated as URLs (to be processed with youtube-dl first).')
	group.add_argument('-x', '--remove-src', action='store_true',
		help='Remove source file(s) on success of the whole operation.')
	group.add_argument('-t', '--dst-dir', metavar='path',
		help='Path to store resulting files in. Defaults to current one.')
	group.add_argument('-y', '--ytdl-opts',
		action='append', metavar='opts',
		help='Extra opts for youtube-dl command.'
			' Will determine the name for resulting file from youtube-dl -o option.'
			' Default is to override -f option for suitable audio formats,'
				' but leave -o unspecified (i.e. use default or config file).'
			' Will be split on spaces, unless option is used multiple times.')

	group = parser.add_argument_group('Volume normalization')
	group.add_argument('-n', '--loudnorm', action='store_true',
		help='Use ffmpeg "loudnorm" filter to have sane volume level.'
			' It takes quite a while to process longer files with it.'
			' Should not be available in pre-3.1 (2016-06-27) ffmpeg builds.'
			' ffmpeg docs link: https://ffmpeg.org/ffmpeg-all.html#loudnorm')
	group.add_argument('-o', '--loudnorm-opts', metavar='ffmpeg-af-opts',
		help='String of options to pass to loudnorm filter,'
				' same as they would appear on ffmpeg command line.'
			' Example: I=-16:TP=-1.5:LRA=11')

	group = parser.add_argument_group('Other ffmpeg options')
	group.add_argument('-s', '--start', metavar='((hh:)mm:)ss(.ms)',
		help='Convert only part of src file(s), starting from specified timestamp.'
			' Passed to ffmpeg -ss option, see "Time duration" in ffmpeg-utils(1) manpage.')
	group.add_argument('-l', '--length', metavar='((hh:)mm:)ss(.ms)',
		help='Convert only specified length of src file(s). Can be combined with -s/--start.'
			' Passed to ffmpeg -t option, see "Time duration" in ffmpeg-utils(1) manpage.')

	group = parser.add_argument_group('Debug/misc')
	group.add_argument('-d', '--debug', action='store_true', help='Verbose operation mode.')

	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	src_list = list(
		(pathlib.Path(src).resolve() if os.path.exists(src) or ':' not in src else src)
		for src in opts.src )
	if opts.dst_dir: os.chdir(opts.dst_dir)
	start, length = map(parse_pos_spec, [opts.start, opts.length])

	ytdl_opts = opts.ytdl_opts or list()
	if len(ytdl_opts) == 1: ytdl_opts = ytdl_opts[0].strip().split()

	global log
	logging.basicConfig(level=logging.DEBUG if opts.debug else logging.WARNING)
	log = get_logger('main')

	if opts.loudnorm:
		from subprocess import run, PIPE
		ffmpeg_info = run(['ffmpeg', '-version'], stdout=PIPE, check=True)
		for line in ffmpeg_info.stdout.decode().splitlines():
			if line.startswith('configuration:') and '--enable-libebur128' in line.split(): break
		else:
			parser.error('--loudnorm option is used, but libebur128 support in ffmpeg is not detected')

	with contextlib.closing(asyncio.get_event_loop()) as loop:
		success = loop.run_until_complete(
			AudioConv.run_async( loop, src_list, start=start, length=length,
				loudnorm=opts.loudnorm, loudnorm_opts=opts.loudnorm_opts, ytdl_opts=ytdl_opts ) )
	if success and opts.remove_src:
		for src in src_list: os.unlink(src)

	return int(not success)

if __name__ == '__main__': sys.exit(main())
