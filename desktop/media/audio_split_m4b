#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from __future__ import print_function

import itertools as it, operator as op, functools as ft
import os, sys, math, re, subprocess, datetime as dt


def force_bytes(bytes_or_unicode, encoding='utf-8', errors='backslashreplace'):
	if isinstance(bytes_or_unicode, bytes): return bytes_or_unicode
	return bytes_or_unicode.encode(encoding, errors)

def force_unicode(bytes_or_unicode, encoding='utf-8', errors='replace'):
	if isinstance(bytes_or_unicode, unicode): return bytes_or_unicode
	return bytes_or_unicode.decode(encoding, errors)

def naturaltime_diff( ts, ts0=None, ext=None,
		_units=dict( h=3600, m=60, s=1,
			y=365.25*86400, mo=30.5*86400, w=7*86400, d=1*86400 ) ):
	if ts0 is None: ts0 = dt.datetime.now()
	if not isinstance(ts0, dt.datetime): ts0 = dt.datetime.fromtimestamp(ts0)
	if not isinstance(ts, dt.timedelta):
		if not isinstance(ts, dt.datetime): ts = dt.datetime.fromtimestamp(ts)
		ts = abs(ts - ts0)
	res, s = list(), ts.total_seconds()
	for unit, unit_s in sorted(_units.viewitems(), key=op.itemgetter(1), reverse=True):
		val = math.floor(s / float(unit_s))
		if not val: continue
		res.append('{:.0f}{}'.format(val, unit))
		if len(res) >= 2: break
		s -= val * unit_s

	if not res: return 'now'
	else:
		if ext: res.append(ext)
		return ' '.join(res)


class MetaParseError(Exception): pass

def get_chapter_info(path):
	cmd = ['ffprobe', '-v', '0', '-show_chapters', path]
	log.debug('Getting file chapter times with: %s', ' '.join(cmd))
	cmd = subprocess.Popen(cmd, stdout=subprocess.PIPE, close_fds=True)
	chaps = cmd.stdout.read()
	cmd = cmd.wait()
	if cmd: raise MetaParseError('ffprobe failed (exit code: %s)', cmd)
	chaps = re.findall(r'(?sm)^\[CHAPTER\]$(.*?)^\[/CHAPTER\]$', chaps)
	for n, chap_str in enumerate(chaps):
		chap = dict()
		for k, k_dst, v, conv in [
				('start_time', 'a', '[\d.]+', float), ('end_time', 'b', '[\d.]+', float),
				('id', 'id', r'\d+', int), ('TAG:title', 'title', '.*', force_bytes) ]:
			m = re.search(r'(?m)^{}=({})$'.format(k, v), chap_str)
			if not m:
				raise MetaParseError( 'Failed to match key'
					' {!r} from chapter info: {!r}'.format(chap_str, k) )
			try: v = conv(m.group(1))
			except Exception as err:
				raise MetaParseError( 'Failed to convert (func: {})'
					' value for key {!r} (raw value: {!r}): {}'.format(conv, k, v, err) )
			chap[k_dst] = v
		chaps[n] = chap
	for n, chap in enumerate(chaps): # sanity checks
		assert chap['id'] == n, [n, chap]
		assert chap['title'], chap
	log.debug('Parsed %s chapters from: %s', len(chaps), path)
	return chaps


title_subs = {
	r'[\\/]': '_', r'^\.+': '_', r'[\x00-\x1f]': '_', r':': '-_',
	r'<': '(', r'>': ')', r'\*': '+', r'[|!"]': '-', r'[\?\*]': '_',
	'[\'â€™]': '', r'\.+$': '_', r'\s+$': '', r'\s': '_' }

def title_subs_apply(title, _res=list()):
	if title_subs and not _res: _res.extend((re.compile(k), v) for k,v in title_subs.viewitems())
	for sub_re, sub in _res: title = sub_re.sub(sub, title)
	return title


def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Split specified m4b audio file on chapters.'
			' Does not do any transcoding, which can be done on resulting aac files afterwards.')

	parser.add_argument('path', help='Path to source m4b file.')

	parser.add_argument('-n', '--name-format',
		metavar='str.format', default='{n:03d}__{title}.aac',
		help='Template for output filenames as python str.format template string.'
			' Can contain following keys: n, id, title, title_raw, a, b. Default: %(default)s.')
	parser.add_argument('--name-format-raw', action='store_true',
		help='Avoid doing any string replacements on filename (to make it more fs-friendly).')

	parser.add_argument('--dry-run', action='store_true',
		help='Do not slice the file, just print output filenames.')
	parser.add_argument('-d', '--debug', action='store_true', help='Verbose operation mode.')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	global log
	import logging
	logging.basicConfig(
		datefmt='%Y-%m-%d %H:%M:%S',
		format='%(asctime)s :: %(name)s %(levelname)s :: %(message)s',
		level=logging.DEBUG if opts.debug else logging.INFO )
	log = logging.getLogger()

	ts_fmt = '{:f}'
	chaps = get_chapter_info(opts.path)
	for n, chap in enumerate(chaps, 1):
		meta = dict(n=n)
		meta.update((k, chap[k]) for k in ['id', 'title', 'a', 'b'])
		meta['title_raw'] = meta['title']
		if not opts.name_format_raw: meta['title'] = title_subs_apply(meta['title'])
		dst_path = opts.name_format.format(**meta)
		log.info(
			'Copying slice %s - %s (len: %s, start: %s, title: %s) to file: %s',
			meta['a'], meta['b'],
			naturaltime_diff(meta['b'] - meta['a'], 0),
			naturaltime_diff(meta['a'], 0), meta['title_raw'], dst_path )
		if not opts.dry_run:
			subprocess.check_call([ 'ffmpeg', '-loglevel', 'warning',
				'-y', '-i', opts.path, '-acodec', 'copy',
				'-ss', ts_fmt.format(meta['a']), '-to', ts_fmt.format(meta['b']), dst_path ])

	log.debug('Finished')

if __name__ == '__main__': sys.exit(main())
