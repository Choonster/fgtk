#!/usr/bin/env python3

import itertools as it, operator as op, functools as ft
from collections import namedtuple, OrderedDict
from pathlib import Path
from fnmatch import fnmatch
import json, binascii, unicodedata, base64
import enum, struct, select, termios, glob, re
import os, sys, errno, ctypes, fcntl, time, logging


class LogMessage(object):
	def __init__(self, fmt, a, k): self.fmt, self.a, self.k = fmt, a, k
	def __str__(self): return self.fmt.format(*self.a, **self.k) if self.a or self.k else self.fmt

class LogStyleAdapter(logging.LoggerAdapter):
	def __init__(self, logger, extra=None):
		super(LogStyleAdapter, self).__init__(logger, extra or {})
	def log(self, level, msg, *args, **kws):
		if not self.isEnabledFor(level): return
		log_kws = {} if 'exc_info' not in kws else dict(exc_info=kws.pop('exc_info'))
		msg, kws = self.process(msg, kws)
		self.logger._log(level, LogMessage(msg, args, kws), (), log_kws)

get_logger = lambda name: LogStyleAdapter(logging.getLogger(name))


def token_bucket(spec, negative_tokens=False):
	'''Spec: { interval_seconds: float | float_a/float_b }[:burst_float]
			Examples: 1/4:5 (interval=0.25s, rate=4/s, burst=5), 5, 0.5:10, 20:30.
		Expects a number of tokens (can be float, default: 1)
			and *always* subtracts these.
		Yields either None if there's enough
			tokens or delay (in seconds, float) until when there will be.'''
	try:
		try: interval, burst = spec.rsplit(':', 1)
		except (ValueError, AttributeError): interval, burst = spec, 1.0
		else: burst = float(burst)
		if isinstance(interval, str):
			try: a, b = interval.split('/', 1)
			except ValueError: interval = float(interval)
			else: interval = float(a) / float(b)
		if min(interval, burst) < 0: raise ValueError()
	except: raise ValueError('Invalid format for rate-limit: {!r}'.format(spec))
	log.debug('tbf parameters: interval={:.1f}, burst={:.1f}', interval, burst)

	tokens, rate, ts_sync = burst, interval**-1, time.monotonic()
	val = (yield) or 1
	while True:
		ts = time.monotonic()
		ts_sync, tokens = ts, min(burst, tokens + (ts - ts_sync) * rate)
		val, tokens = (None, tokens - val) if tokens >= val else\
			((val - tokens) / rate, (tokens - val) if negative_tokens else tokens)
		val = (yield val) or 1

def notify(title, body, critical=False, timeout=None, icon=None, fork=False):
	if fork:
		pid = os.fork()
		if pid:
			os.waitpid(pid, 0)
			return
	try:
		import gi
		gi.require_version('Notify', '0.7')
		from gi.repository import Notify
		if not getattr(notify, '_init', False):
			Notify.init('logtail')
			notify._init = True
		note = Notify.Notification.new(summary=title, body=body, icon=icon)
		if critical: note.set_urgency(Notify.Urgency.CRITICAL)
		if timeout is not None: note.set_timeout(timeout)
		note.show()
	except: pass
	if fork: os._exit(0)

def notify_logtail_cb(path=None, line='', skipped=None, **notify_kws):
	if skipped:
		notify('logtail', 'Rate-limiting discarded {} event(s)'.format(skipped), **notify_kws)
	if path:
		# Try to strip iso8601 timestamp, use simplier format
		# For things like "2016-06-28T20:53:03.550642+05:00 user.notice proc[5973]: stuff"
		line = re.sub( r'\d{4}-\d{2}-\d{2}[T ](\d{2}:){2}\d{2}(\.\d+)'
				r'?(\+|-)\d{2}:\d{2} (?P<channel>[\w.]+)(<\d+>)? (?P<msg>.*)$',
			r'\g<channel> \g<msg>', line )
		if 'logtail_notify' in line: return # to avoid exception loops
		# Slow, can probably be optimized by compiling all these chars into a regexp
		line = ''.join( c for c in line
			if not unicodedata.category(c).startswith('C') )
		notify('log: {}'.format(path.name), line, **notify_kws)


class INotify:
	# Based on inotify_simple module

	class flags(enum.IntEnum): # see "man inotify"

		access = 0x00000001
		modify = 0x00000002
		attrib = 0x00000004
		close_write = 0x00000008
		close_nowrite = 0x00000010
		open = 0x00000020
		moved_from = 0x00000040
		moved_to = 0x00000080
		create = 0x00000100
		delete = 0x00000200
		delete_self = 0x00000400
		move_self = 0x00000800

		unmount = 0x00002000
		q_overflow = 0x00004000
		ignored = 0x00008000

		onlydir = 0x01000000
		dont_follow = 0x02000000
		excl_unlink = 0x04000000
		mask_add = 0x20000000
		isdir = 0x40000000
		oneshot = 0x80000000

		close = close_write | close_nowrite
		move = moved_from | moved_to
		all_events = (
			access | modify | attrib | close_write | close_nowrite | open |
			moved_from | moved_to | delete | create | delete_self | move_self )

		@classmethod
		def unpack(cls, mask):
			return set( flag
				for flag in cls.__members__.values()
				if flag & mask == flag )

	_INotifyEv_struct = 'iIII'
	_INotifyEv_struct_len = struct.calcsize(_INotifyEv_struct)
	INotifyEv = namedtuple( 'INotifyEv',
		['path', 'path_mask', 'wd', 'flags', 'cookie', 'name'] )

	_libc = None
	@classmethod
	def _get_lib(cls):
		if cls._libc is None:
			libc = cls._libc = ctypes.CDLL('libc.so.6', use_errno=True)
		return cls._libc

	def _call(self, func, *args):
		if isinstance(func, str): func = getattr(self._lib, func)
		while True:
			res = func(*args)
			if res == -1:
				err = ctypes.get_errno()
				if err == errno.EINTR: continue
				else: raise OSError(err, os.strerror(err))
			return res

	_fd = _poller = _lib = None

	def __init__(self):
		self._lib = self._get_lib()
		self.wd_paths = OrderedDict()

	def open(self):
		self._fd = self._call('inotify_init')
		self._poller = select.epoll()
		self._poller.register(self._fd)

	def close(self):
		if self._fd:
			os.close(self._fd)
			self._fd = None
		if self._poller:
			self._poller.close()
			self._poller = None
		if self._lib: self._lib = None

	def __enter__(self):
		self.open()
		return self
	def __exit__(self, *err): self.close()
	def __del__(self): self.close()

	def add_watch(self, path, mask):
		wd = self._call('inotify_add_watch', self._fd, bytes(path), mask)
		self.wd_paths[wd] = path, mask
		return wd

	def rm_watch(self, wd):
		self._call('inotify_rm_watch', self._fd, wd)
		self.wd_paths.pop(wd)

	def poll(self, timeout=None):
		return bool(self._poller.poll(timeout))

	def read(self, poll=True, **poll_kws):
		evs = list()
		if poll:
			if not self.poll(**poll_kws): return evs
		bs = ctypes.c_int()
		fcntl.ioctl(self._fd, termios.FIONREAD, bs)
		if bs.value <= 0: return evs
		buff = os.read(self._fd, bs.value)
		n, bs = 0, len(buff)
		while n < bs:
			wd, mask, cookie, name_len = struct.unpack_from(self._INotifyEv_struct, buff, n)
			n += self._INotifyEv_struct_len
			name = ctypes.c_buffer(buff[n:n + name_len], name_len).value.decode()
			n += name_len
			evs.append(self.INotifyEv(
				*self.wd_paths[wd], wd, self.flags.unpack(mask), cookie, name ))
		return evs

	def __iter__(self):
		while True:
			for ev in self.read():
				if (yield ev) is StopIteration: break
			else: continue
			break

	@classmethod
	def ev_wait(cls, path, mask=None):
		return next(cls.ev_iter(path, mask))

	@classmethod
	def ev_iter(cls, path, mask=None):
		with cls() as ify:
			if not isinstance(path, (tuple, list)): path = [path]
			for p in path: ify.add_watch(p, mask or INotify.flags.all_events)
			ev_iter, chk = iter(ify), None
			while True:
				try: chk = yield ev_iter.send(chk)
				except StopIteration: break


class Logtail(object):

	notifier = xattr_db = callback = None

	def __init__( self, paths, callback, exclude=None,
			keep_pos=False, xattr_name='user.logtail.pos', xattr_db=None, tbf=None ):
		if not isinstance(paths, (tuple, list)): paths = [paths]
		if exclude and not isinstance(exclude, (tuple, list)): exclude = [exclude]
		self.callback, self.keep_pos, self.tbf = callback, keep_pos, tbf or iter(it.repeat(None))
		self.paths_mask, self.xattr_name, self.xattr_db_path = paths, xattr_name, xattr_db
		self.exclude = list(map(re.compile, exclude or list()))

	def open(self):
		masks, paths = self.paths_mask, list()
		paths_to_watch = self.paths_to_watch = dict()
		self.paths_pos, self.paths_buff = dict(), dict()

		if not isinstance(masks, (tuple, list)): masks = [masks]
		for mask in masks:
			for mask in self.glob_alter(mask):
				# All matched parent dirs - like /x/y/z for /x/*/z/file* - are watched for pattern
				# Note that watchers won't be auto-added for /x/m/z, if it'll be created later on
				paths_ext = list(
					(Path(p).resolve(), Path(mask).name)
					for p in glob.iglob(str(Path(mask).parent)) )
				paths.extend(paths_ext)
				# If full pattern already match something, watch it if it's a dir - /x/dir1 for /x/dir*
				# Note that watchers won't be auto-added for /x/dir2, if it'll be created later on
				if paths_ext: # no point going deeper if parent dirs don't exist
					paths_ext = list(Path(p).resolve() for p in glob.iglob(mask))
					paths.extend((p, '*') for p in paths_ext if p.is_dir())
		# Aggregate path masks by-realpath
		for p, mask in paths:
			if not p.is_dir():
				log.debug('Skipping special path: {}', p)
				continue
			if p not in paths_to_watch:
				paths_to_watch[p] = {mask}
			else: paths_to_watch[p].add(mask)

		if self.xattr_db_path:
			import shelve
			self.xattr_db = shelve.open(self.xattr_db_path)

		if not self.keep_pos:
			for path_dir, masks in paths_to_watch.items():
				for mask in masks: self.discard_changes(path_dir / mask)

		log.debug('Starting inotify watcher')
		self.notifier = INotify()
		self.notifier.open()
		in_flags = self.notifier.flags.create | self.notifier.flags.modify
		for p in paths_to_watch:
			log.debug('Adding watcher for path: {}', p)
			self.notifier.add_watch(p, in_flags)

	def close(self):
		if self.notifier:
			self.notifier.close()
			self.notifier = None
		if self.xattr_db is not None:
			self.xattr_db.close()
			self.xattr_db = None
		self.callback = None

	def __enter__(self):
		self.open()
		return self
	def __exit__(self, *err): self.close()
	def __del__(self): self.close()


	@staticmethod
	def glob_alter(pattern, _glob_cbex=re.compile(r'\{[^}]+\}')):
		'''Shell-like glob with support for curly braces.
			Usage of these braces in the actual name is not supported.'''
		pattern, subs = str(pattern), list()
		while True:
			ex = _glob_cbex.search(pattern)
			if not ex: break
			subs.append(ex.group(0)[1:-1].split(','))
			pattern = pattern[:ex.span()[0]] + '{}' + pattern[ex.span()[1]:]
		return list(it.starmap(pattern.format, it.product(*subs)))

	def data_checksum(self, data):
		return base64.urlsafe_b64encode(struct.pack(
			'>I', binascii.crc32(data.encode()) )).decode().rstrip('=')

	def file_end_mark(self, path, size=200, pos=None, data=None):
		if not pos:
			with path.open() as src:
				if not data:
					pos = None
					while pos != src.tell(): # to ensure that file didn't grow in-between
						pos = os.fstat(src.fileno()).st_size
						src.seek(-min(pos, size), os.SEEK_END)
						data = src.read()
				else:
					pos = os.fstat(src).st_size
		return pos, len(data), self.data_checksum(data)

	def file_end_check(self, path, pos, size=None, data_hash=None):
		if pos != path.stat().st_size: return False
		elif size and data_hash:
			with path.open() as src: # lots of races ahead, but whatever
				src.seek(-size, os.SEEK_END)
				data = src.read(size)
				if len(data) != size: return False # not the end
				if self.data_checksum(data) != data_hash: return False # not the *same* end
		return True

	def xattr_get(self, path):
		if self.xattr_db is None:
			return json.loads(os.getxattr(str(path), self.xattr_name))
		try: return self.xattr_db['{}\0{}'.format(path, self.xattr_name)]
		except KeyError:
			raise OSError(errno.ENODATA, os.strerror(errno.ENODATA))

	def xattr_set(self, path, data):
		if self.xattr_db is None:
			return os.setxattr(str(path), self.xattr_name, json.dumps(data).encode())
		self.xattr_db['{}\0{}'.format(path, self.xattr_name)] = data


	def run(self):
		skipped, delay, discard_msg_ts = 0, None, None
		while True:
			events = self.notifier.read(timeout=delay)
			if skipped and discard_msg_ts and time.monotonic() >= discard_msg_ts:
				self.callback(skipped=skipped)
				skipped = 0
			for ev in events:
				if not ev.name:
					log.debug('Ignoring inotify ev without name: {}', ev)
					continue
				lines = self.handle_change(ev.path / ev.name, ev.flags) or list()
				for path, line in lines:
					delay = next(self.tbf)
					if delay:
						log.debug('Rate-limited line (delay: {:.1f}) [{}]: {!r}', delay, path, line)
						skipped += 1
					else:
						if skipped:
							self.callback(skipped=skipped)
							skipped = 0
						log.debug('New line [{}]: {!r}', path, line)
						self.callback(path, line)
				if skipped: discard_msg_ts = time.monotonic() + delay

	def discard_changes(self, path):
		self.handle_change(path, discard=True)

	def handle_change(self, path, flags=None, discard=False):
		if flags: log.debug('Event: {} ({})', path, flags)

		## Filtering
		path_real = path.resolve()
		if not path_real.is_file():
			log.debug( 'Ignoring event for'
				' non-regular file: {} (realpath: {})', path, path_real )
			return
		dir_key = path_real.resolve().parent
		if dir_key not in self.paths_to_watch:
			log.warn( 'Ignoring event for file outside of'
				' watched set of paths: {} (realpath: {})', path, path_real )
			return
		for pat in self.paths_to_watch[dir_key]:
			if fnmatch(path.name, pat): break
		else:
			log.debug( 'Non-matched path in one of'
				' the watched dirs: {} (realpath: {})', path, path_real )
			return
		for pat in self.exclude:
			if pat.search(str(path)):
				log.debug( 'Matched path by exclude'
					'-pattern ({}): {} (realpath: {})', pat, path, path_real )
				return

		## Get last position
		pos = self.paths_pos.get(path_real)
		if not pos: # try restoring it from xattr
			try: pos = self.xattr_get(path_real)
			except OSError as err:
				if err.errno != errno.ENODATA: raise
				log.debug('Failed to restore last log position from xattr for path: {}', path)
			else:
				log.debug( 'Restored pos from xattr ({})'
					' for path {}: {!r}', self.xattr_name, path_real, pos )
		if pos:
			pos, size, data_hash = pos
			if self.file_end_check(path_real, pos, size=size, data_hash=data_hash):
				if not discard:
					log.debug('Event (flags: {}) for unchanged path, ignoring: {}', flags, path)
				return
			if path_real.stat().st_size < pos:
				log.debug('Detected truncation of a path, rewinding: {}', path)
				pos = None

		## Actual processing
		lines = list()
		buff_agg = self.paths_buff.setdefault(path_real, '')
		with path_real.open() as src:
			if pos:
				src.seek(pos)
				pos = None
			while True:
				pos = src.tell()
				try: buff, pos = src.readline(), src.tell()
				except StopIteration:
					buff_agg = ''
					src.seek(pos) # revert back to starting position
					buff, pos = src.readline(), src.tell()
				if not buff: # eof, try to mark the position
					if not buff_agg: # clean eof at the end of the chunk - mark it
						pos = self.file_end_mark(path_real, pos=pos, data=buff_agg)
						self.paths_pos[path_real] = pos
						self.xattr_set(path_real, pos)
						log.debug( 'Updated xattr ({}) for path'
							' {} to: {!r}', self.xattr_name, path_real, pos )
					break
				buff_agg += buff
				if buff_agg.endswith('\n'): # ok due to src.readline()
					line = buff_agg.strip()
					buff_agg = self.paths_buff[path_real] = ''
					lines.append((path, line))

		return lines


def main():
	import argparse
	parser = argparse.ArgumentParser(
		description='Monitor given log paths for changes,'
			' creating desktop notifications for new lines.')
	parser.add_argument('patterns', nargs='+', help='Glob patterns for paths to monitor.')
	parser.add_argument('--exclude',
		action='append', metavar='regexp',
		help='Regexps to match against paths to exclude from monitoring.')
	parser.add_argument('-f', '--tb-rate-filter',
		metavar='{ interval_seconds: float | float_a/float_b }[:burst_float]',
		help='Token-bucket rate-limiting filter specification.'
			' If specified, rate-limited events will be reported'
				' as one extra message, with only number of skipped ones.'
			' Format: { interval_seconds: float | float_a/float_b }[:burst_float].'
			' Examples: 1/4:5 (interval=0.25s, rate=4/s, burst=5), 5, 0.5:10, 20:30.')
	parser.add_argument('-i', '--icon', metavar='name', help='Icon to use for notifications.')
	parser.add_argument('--keep-pos', action='store_true',
		help='Start reading file from last-recorded position, not from the end.')
	parser.add_argument('-x', '--xattr-db', metavar='path',
		help='Path to shelve-db to use instead of xattrs to record file position.')
	parser.add_argument('--fork-notifications', action='store_true',
		help='Fork notification subprocess, so that it would connect to dbus on each msg.'
			' Can be useful for some highly unreliable dbus/notification-daemon setup.')
	parser.add_argument('--debug', action='store_true', help='Verbose operation mode.')
	opts = parser.parse_args()

	global log
	logging.basicConfig(level=logging.DEBUG if opts.debug else logging.WARNING)
	log = get_logger('main')

	notify_kws = dict()
	if opts.icon: notify_kws['icon'] = opts.icon
	if opts.fork_notifications: notify_kws['fork'] = opts.fork_notifications
	with Logtail(
			opts.patterns, ft.partial(notify_logtail_cb, **notify_kws),
			keep_pos=opts.keep_pos, exclude=opts.exclude, xattr_db=opts.xattr_db,
			tbf=opts.tb_rate_filter and token_bucket(opts.tb_rate_filter) ) as tailer:
		log.debug('Starting event loop...')
		tailer.run()
		log.debug('Event loop finished')

if __name__ == '__main__': main()
