#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from __future__ import print_function

import itertools as it, operator as op, functools as ft
from contextlib import closing
from os.path import join
from xml.sax.saxutils import escape as xml_escape
import email, email.header, email.errors
import os, sys, re, iso8601, calendar, time, zmq, json


def file_follow( src, open_tail=True,
		read_interval_min=0.1,
			read_interval_max=20, read_interval_mul=1.1,
		rotation_check_interval=20, yield_file=False, **open_kwz ):
	from time import time, sleep
	from io import open
	import os, types

	open_tail = open_tail and isinstance(src, types.StringTypes)
	src_open = lambda: open(path, mode='rb', **open_kwz)
	stat = lambda f: (os.fstat(f) if isinstance(f, int) else os.stat(f))
	sanity_chk_stats = lambda stat: (stat.st_ino, stat.st_dev)
	sanity_chk_ts = lambda ts=None: (ts or time()) + rotation_check_interval

	if isinstance(src, types.StringTypes): src, path = None, src
	else:
		path = src.name
		src_inode, src_inode_ts =\
			sanity_chk_stats(stat(src.fileno())), sanity_chk_ts()
	line, read_chk = '', read_interval_min

	while True:

		if not src: # (re)open
			src = src_open()
			if open_tail:
				src.seek(0, os.SEEK_END)
				open_tail = False
			src_inode, src_inode_ts =\
				sanity_chk_stats(stat(src.fileno())), sanity_chk_ts()
			src_inode_chk = None

		ts = time()
		if ts > src_inode_ts: # rotation check
			src_inode_chk, src_inode_ts =\
				sanity_chk_stats(stat(path)), sanity_chk_ts(ts)
			if stat(src.fileno()).st_size < src.tell(): src.seek(0) # truncated
		else: src_inode_chk = None

		buff = src.readline()
		if not buff: # eof
			if src_inode_chk and src_inode_chk != src_inode: # rotated
				src.close()
				src, line = None, ''
				continue
			if read_chk is None:
				yield (buff if not yield_file else (buff, src))
			else:
				sleep(read_chk)
				read_chk *= read_interval_mul
				if read_chk > read_interval_max:
					read_chk = read_interval_max
		else:
			line += buff
			read_chk = read_interval_min

		if line and line[-1] == '\n': # complete line
			try:
				val = yield (line if not yield_file else (line, src))
				if val is not None: raise KeyboardInterrupt
			except KeyboardInterrupt: break
			line = ''

	src.close()


def file_follow_durable( path,
		min_dump_interval=10,
		xattr_name='user.mail_notify.pos', xattr_update=True,
		**follow_kwz ):
	'''Records log position into xattrs after reading line every
			min_dump_interval seconds.
		Checksum of the last line at the position
			is also recorded (so line itself don't have to fit into xattr) to make sure
			file wasn't truncated between last xattr dump and re-open.'''

	from xattr import xattr
	from io import open
	from hashlib import sha1
	from time import time
	import struct

	# Try to restore position
	src = open(path, mode='rb')
	src_xattr = xattr(src)
	try:
		if not xattr_name: raise KeyError
		pos = src_xattr[xattr_name]
	except KeyError: pos = None
	if pos:
		data_len = struct.calcsize('=I')
		(pos,), chksum = struct.unpack('=I', pos[:data_len]), pos[data_len:]
		(data_len,), chksum = struct.unpack('=I', chksum[:data_len]), chksum[data_len:]
		try:
			src.seek(pos - data_len)
			if sha1(src.read(data_len)).digest() != chksum:
				raise IOError('Last log line doesnt match checksum')
		except (OSError, IOError) as err:
			log.info('Failed to restore log position: %s', err)
			src.seek(0)
	tailer = file_follow(src, yield_file=True, **follow_kwz)

	# ...and keep it updated
	pos_dump_ts_get = lambda ts=None: (ts or time()) + min_dump_interval
	pos_dump_ts = pos_dump_ts_get()
	while True:
		line, src_chk = next(tailer)
		if not line: pos_dump_ts = 0 # force-write xattr
		ts = time()
		if ts > pos_dump_ts:
			if src is not src_chk:
				src, src_xattr = src_chk, xattr(src_chk)
			pos_new = src.tell()
			if pos != pos_new:
				pos = pos_new
				if xattr_update:
					src_xattr[xattr_name] =\
						struct.pack('=I', pos)\
						+ struct.pack('=I', len(line))\
						+ sha1(line).digest()
			pos_dump_ts = pos_dump_ts_get(ts)
		if (yield line.decode('utf-8', 'replace')):
			tailer.send(StopIteration)
			break


def mail_find(maildir, msgid, msgpath, ts, ts_diff_max=5*60):
	if msgpath != 'INBOX':
		maildir = join(maildir, '.{}'.format(msgpath))
	for d in 'new', 'cur':
		path = join(maildir, d)
		for mail in sorted(os.listdir(path), reverse=True):
			if not re.search(r'^\d+\.', mail): continue
			mail = join(path, mail)
			if abs(ts - os.stat(mail).st_mtime) > ts_diff_max: break # newest mails should be first
			with open(mail) as src:
				for line in src:
					line = line.strip()
					if not line: break # end of headers
					match = re.search(r'^message-id:\s*(<[^>]+>)\s*$'.format(re.escape(msgid)), line, re.I)
					if not match or match.group(1) != msgid: continue
					src.seek(0)
					return email.message_from_file(src)

def mail_iter_log(log_tailer, maildir, path_filters=list()):
	path_exclude_cache = set()

	for line in iter(log_tailer.next, u''):
		# u"2013-11-26T22:50:19.455012+06:00 mail.info dovecot[-]:
		#   lda(fraggod): sieve: msgid=<20131126165018.BFDC02A0EA2@malediction.core>: stored mail into mailbox 'INBOX'\n"
		match = re.search(
			r'(?P<ts>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}) mail\.info dovecot\[(-|\d+)\]:\s+'
			r'lda\([^)]+\): sieve: msgid=(?P<msgid><[^>]+>|[^\s:]+|unspecified):'
			r' stored mail into mailbox \'(?P<path>[^\']+)\'\s*$', line )
		if not match:
			log.warn('Failed to match line: %r', line.strip())
			continue
		ts = calendar.timegm(iso8601.parse_date(match.group('ts')).utctimetuple())
		msgid, msgpath = match.group('msgid'), match.group('path')

		if msgid == 'unspecified':
			log.info('Skipping message with unspeficied msgid (path: %s)', msgpath)
			continue

		if msgpath not in path_exclude_cache:
			msg_pass = True
			for pat in path_filters:
				if not pat: continue
				pat, inc = (pat[1:], pat[0] == '+') if pat[0] in '-+' else (pat, False)
				if re.search(pat, msgpath):
					if not inc: msg_pass = False
					break
		else: msg_pass = False
		if not msg_pass:
			path_exclude_cache.add(msgpath)
			log.debug('Skipping mail for path: %s', msgpath)
			continue

		msg = mail_find(maildir, msgid, msgpath, ts)
		if msg is None:
			log.info('Failed to find delivered (path: %s) message: %s', msgpath, msgid)
			continue
		yield msgpath, msg


def zmq_addr(addr):
	if not re.search(r'^\w+://', addr):
		return 'tcp://{}'.format(addr)
	return addr

def header_decode(line):
	# Doesn't pick up some badly-concatenated stuff
	return ' '.join( val.decode(enc or 'utf-8', 'replace')
		for val, enc in email.header.decode_header(line) )

def header(msg, k):
	res, header = list(), header_decode(msg.get(k, ''))
	while True:
		match = re.search('=\?[\w\d-]+(\*[\w\d-]+)?\?[QB]\?[^?]+\?=', header)
		if not match:
			res.append(header)
			break
		start, end = match.span(0)
		match = header[start:end]
		try: match = header_decode(match)
		except email.errors.HeaderParseError: pass
		res.extend([header[:start], match])
		header = header[end:]
	return ''.join(res)


def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Monitor (tail) specified dovecot log'
			' and dispatch new mail delivery notifications via zeromq pub socket.')
	parser.add_argument('log_path', help='Path to dovecot log file.')
	parser.add_argument('maildir_path', help='Path to maildir where mails are delivered to.')

	parser.add_argument('-b', '--bind',
		action='append', metavar='ip:port',
		help='zmq socket bind address - can be either ip:port (assumed to be'
				' tcp socket, e.g. 1.2.3.4:5678) or full zmq url (e.g. tcp://1.2.3.4:5678).'
			' Can be specified multiple times to bind to more than one address/port.')
	parser.add_argument('-d', '--dst',
		action='append', metavar='ip:port',
		help='Peer address to connect zmq socket to - can be either ip:port'
				' (assumed to be tcp socket, e.g. 1.2.3.4:5678) or full zmq url (e.g. tcp://1.2.3.4:5678).'
			' Can be specified multiple times to deliver message to more than one peer.')

	parser.add_argument('-n', '--hostname',
		metavar='network_name', default=os.uname()[1],
		help='Source name to use for dispatched message.')
	parser.add_argument('-w', '--wait-connect',
		type=float, metavar='seconds', default=1,
		help='Timeout to wait for peer connections to'
			' establish (default: %(default)s) and unsent messages to linger.')

	parser.add_argument('-f', '--filter', action='append', metavar='spec',
		help='Filter-pattern (format: [+/-]regexp) for mail path.'
			' Patterns are evaluated in same order'
				' as they are specified with "pass" as a default action.'
			' Optional "-" or "+" sign before regexp explicitly marks pattern as'
				' include or exclude one, otherwise patterns are treated as "exclude".')

	parser.add_argument('-a', '--app-name', metavar='name', default='mail_notify',
		help='App name for the icon (default: %(default)s).')
	parser.add_argument('-i', '--icon', action='append', metavar='icon',
		help='Icon name, path or alias. Can be specified multiple times (for fallback icon names).')

	parser.add_argument('--test-message', action='store_true',
		help='Issue test notification right after start.')
	parser.add_argument('--pango-markup', action='store_true',
		help='Use pango markup in issued notifications and escape other stuff.')
	parser.add_argument('--dry-run', action='store_true',
		help='Do not store/update log position - just parse and generate notifications.')
	parser.add_argument('--debug', action='store_true', help='Verbose operation mode.')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	if not opts.bind and not opts.dst:
		parser.error('At least one of either --bind or --dst must be specified.')

	global log
	import logging
	logging.basicConfig(level=logging.DEBUG if opts.debug else logging.WARNING)
	log = logging.getLogger()

	log_tailer = file_follow_durable( opts.log_path,
		xattr_name='user.mail_notify.pos', xattr_update=not opts.dry_run )

	ctx = zmq.Context()
	try:
		with closing(ctx.socket(zmq.PUB)) as sock:
			if hasattr(zmq, 'IPV4ONLY'):
				sock.setsockopt(zmq.IPV4ONLY, False)
			sock.setsockopt(zmq.RECONNECT_IVL_MAX, int(300 * 1000))
			sock.setsockopt(zmq.LINGER, int(opts.wait_connect * 1000))
			sock.setsockopt(zmq.SNDHWM, 50)

			if opts.bind:
				for dst in it.imap(zmq_addr, opts.bind):
					log.debug('Binding to %s', dst)
					sock.bind(dst)
			if opts.dst:
				log.debug('Connecting to %s peer(s)', len(opts.dst))
				for dst in it.imap(zmq_addr, opts.dst): sock.connect(dst)
			time.sleep(opts.wait_connect)

			def zmq_send(summary, body):
				msg = dict(
					summary=summary, body=body,
					app_name=opts.app_name, icon=','.join(opts.icon or []) )
				msg = '\1' + json.dumps([opts.hostname, time.time(), msg])
				try: sock.send(msg, zmq.DONTWAIT)
				except zmq.ZMQError as err:
					if err.errno != zmq.EAGAIN: raise

			if opts.test_message:
				log.debug('Dispatching test notification')
				format_kws = dict( host=os.uname()[1],
						pub=', '.join(opts.bind), sub=', '.join(opts.dst) )\
					if not opts.pango_markup else\
					dict( host='<b>{}</b>'.format(xml_escape(os.uname()[1])),
						pub=', '.join('<u>{}</u>'.format(xml_escape(v)) for v in opts.bind),
						sub=', '.join('<u>{}</u>'.format(xml_escape(v)) for v in opts.dst) )
				zmq_send( 'Mail notification test',
					( 'Mail notification daemon started successfully on host:'
						' {host}\nPub socket(s): {pub}\nConnecting to: {sub}' )\
					.format(**format_kws) )

			for path, msg in mail_iter_log(log_tailer, opts.maildir_path, opts.filter):
				msg_from, msg_subj = (header(msg, k) for k in ['from', 'subject'])
				log.debug('Dispatching notification: (%s) %s - %s', path, msg_from, msg_subj)
				if opts.pango_markup:
					path, msg_from, msg_subj = map(xml_escape, [path, msg_from, msg_subj])
					msg_path = '<b>{}</b>'.format(path)
				else: msg_path = path
				zmq_send(
					'New mail ({})'.format(path),
					u'Path: {}\nFrom: {}\nSubject: {}'.format(msg_path, msg_from, msg_subj) )

	finally:
		log.debug('Terminating zmq context...')
		ctx.term()


if __name__ == '__main__': sys.exit(main())
