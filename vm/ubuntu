#!/bin/bash

script_info='Ubuntu VM, started from shared virtio-fs by default.'
ins=1 mem=4G img= dev= iso=

video=( -vga virtio -display gtk,gl=on )
# video=( -vga std )
# video=( -display vnc 0 )

[[ "$1" = -r || "$1" = --root || "$UID" -ne 0 ]] || {
	echo >&2 "ERROR: running as uid=0 but no -r/--root specified"; exit 1; }

[[ "$1" = -i || "$1" = --instance ]] && { ins=$2; shift; shift; }
[[ "$1" = -m || "$1" = --mem ]] && { mem=$2; shift; shift; }
[[ "$1" = -q || "$1" = --img ]] && { img=$(realpath "$2"); shift; shift; }
[[ "$1" = -d || "$1" = --dev ]] && { dev=$(realpath "$2"); shift; shift; }
[[ "$1" = --iso ]] && { iso=$(realpath "$2"); shift; shift; }
[[ "$1" = -c || "$1" = --console ]] && { video=( -nographic ); shift; }

root=$(dirname "$BASH_SOURCE")
dst="$root"/live.dump
telnet_port=$(( 8200 + $ins ))
vde_mac=52:54:00:12:34:$(( 60 + $ins ))
vde_path=~/tmp/vde
dump_inc= restore= net_only=


### Management

case "$1" in
	d|dump)
		[[ "$2" = -i ]] && { dump_inc=-i; shift; }
		[[ -n "$2" ]] && {
			touch "$2" || exit 1
			dst=$(realpath "$2")
		}
		echo "Dumping to: $dst"
		ncat -t 127.0.0.1 "$telnet_port" <<EOF
stop
migrate_set_speed 4g
migrate -d $dump_inc "exec:lzop -c > $dst"
EOF
		echo
		while :; do
			echo 'info migrate' | ncat -t 127.0.0.1 "$telnet_port" |
				grep -aq '^Migration status:[[:space:]]*completed[[:space:]]*$'
			pipe=( "${PIPESTATUS[@]}" )
			[[ ${pipe[0]} -ne 0 || ${pipe[1]} -ne 0 ]] && exit 1
			[[ ${pipe[2]} -eq 0 ]] && {
				echo 'quit' | ncat -t 127.0.0.1 "$telnet_port"
				echo "Done"
				ls -lah "$dst"
				exit 0
			}
			sleep 1 || exit 1
		done ;;

	r|restore)
		[[ -n "$2" ]] && dst=$2
		echo "Restoring from: $dst"
		[[ -f "$dst" ]] || { echo >&2 "FIle not found: $dst"; exit 1; }
		restore=t ;;

	m|monitor) exec rlwrap ncat -t 127.0.0.1 "$telnet_port" ;;
	n|net|net-only) net_only=t ;;

	'') ;;
	*)
		echo >&2 "Usage: $0 [-r|--root] [ {-i|--instance} $ins ] [ {-m|--mem} $mem ] \\"
		echo >&2 "  [ {-q|--img} file.qcow2 ] [ {-d|--dev} /dev/xyz ] [ --iso image.iso ] [-c|--console] \\"
		echo >&2 "  [ { d | dump } [path] | { r | restore } [-i] [path] | { m | monitor } | { n | net-only } ]"
		echo >&2 "(note: ordering of options matters)"
		cat >&2 <<EOF

$script_info

-- Initial install to qemu-img
  qemu-img create -f qcow2 install.qcow2 10G
  ./ubuntu --img install.qcow2 --iso ubuntu/ubuntu-18.04-desktop-amd64.iso

-- ubuntu - add virtiofs.ko to initramfs
  # needs kernel-5.4+ - https://kernel.ubuntu.com/~kernel-ppa/mainline/
  echo virtiofs >> /etc/initramfs-tools/modules
  update-initramfs -k all -c

-- rsync from nbd to shared fs/mount
  modprobe nbd
  qemu-nbd -c /dev/nbd0 install.qcow2
  fsck -a /dev/nbd0p1
  mount /dev/nbd0p1 /mnt/nbd

  rsync -HaAxXS /mnt/nbd/. fs/
  : > fs/etc/fstab && rm fs/swapfile

  umount /mnt/nbd
  qemu-nbd -d /dev/nbd0

-- $(awk '!/^#/ {p=0} /^### virtiofsd/ {
	p=1; sub(/^#+ ?/,"")} p {sub(/^#+ ?/,"  "); print}' $0)

-- run from virtio-fs: ./ubuntu

EOF
		exit 1 ;;
esac

cd "$root"


### Too slow otherwise

err=0
modprobe kvm || exit 1
modprobe kvm-intel 2>/dev/null || (( err += 1 ))
modprobe kvm-amd 2>/dev/null || (( err += 1 ))
[[ "$err" -lt 2 ]] || { echo >&2 "ERROR: failed to load kvm intel/amd modules"; exit 1; }


### VDE

pid1=$$ pid2=$$
mkdir -p "$vde_path"

cgrc -rcu vde && {
	cgrc -ru vde apps-vm -- vde_switch \
		-s "$vde_path"/link.sock -M "$vde_path"/mgmt.sock &
	pid1=$!; }

for n in {0..50}; do
	[[ -e "$vde_path"/link.sock ]] && break
	sleep 0.1
done
[[ $n -lt 50 ]] || { echo >&2 "ERROR: vde switch startup failed"; exit 1; }

cgrc -rcu vde-tap && {
	cgrc -ru vde-tap apps-vm -- sudo vde_plug2tap \
		-s "$vde_path"/link.sock vde &
	pid2=$!; }

# Add a little delay if vde stuff is just starting
kill -0 "$pid1" "$pid2" || { echo >&2 "ERROR: vde failed to start"; exit 1; }
for n in {0..5}; do
	err=t; ip link show vde &>/dev/null && { err=; break; }
	sleep 0.1
done
[[ -z "$err" ]] || { echo >&2 "ERROR: vde failed to start (no iface)"; exit 1; }

[[ -n "$net_only" ]] && exit 0


### virtiofsd daemon - has to run as root:
# # uid=root is to allow access to local uid=root files
# # Note: SETLKW (fcntl wait for lock) is still not supported.
# #   Workaround: bind-mount files that require it from /run, see this script for example .service.
#
# /usr/lib/qemu/virtiofsd -f \
#  -o source=$(realpath fs) --socket-path=fs.sock \
#  -o cache=always,writeback,xattr,flock,posix_lock &
# chmod 666 fs.sock

## setup-setlkw-hacks.service workaround for SETLKW in dpkg and such
# [Unit]
# DefaultDependencies=no
# After=local-fs.target run.mount
#
# # Anything requiring SETLKW on these files should be listed here
# Before=systemd-sysusers.service
#
# [Service]
# Type=oneshot
# RemainAfterExit=yes
#
# ExecStart=bash -c '\
# 	mkdir -m700 /run/setlkw ; cd /run/setlkw ;\
# 	touch dpkg-triggers ; mount -o bind dpkg-triggers /var/lib/dpkg/triggers/Lock ;\
# 	touch passwd /etc/.pwd.lock ; mount -o bind passwd /etc/.pwd.lock ;\
# '
# ExecStop=bash -c '\
# 	umount -l /var/lib/dpkg/triggers/Lock /etc/.pwd.lock ;\
# '
#
# [Install]
# WantedBy=multi-user.target


### img/iso options

root_opts=()
[[ -z "$img" ]] || root_opts+=(
	-drive file="$img",if=virtio,aio=native,cache=writeback,cache.direct=on )
[[ -z "$dev" ]] || root_opts+=( -drive file="$dev",if=virtio,format=raw )

[[ ${#root_opts[@]} -gt 0 ]] || root_opts=(
	# Fix access to these: chmod a+r fs/boot/*
	-kernel fs/boot/vmlinuz
	-initrd fs/boot/initrd.img
	-append 'root=vio-root rootfstype=virtiofs rw quiet splash'

	-chardev socket,id=vfs-root,path="$root"/fs.sock
	-device vhost-user-fs-pci,queue-size=1024,chardev=vfs-root,tag=vio-root,cache-size=2G
	-object memory-backend-file,id=vfs-mem,size=4G,mem-path=/dev/shm,share=on
	-numa node,memdev=vfs-mem )

[[ -z "$iso" ]] || root_opts+=( -cdrom "$iso" )


### Run qemu

qemu_opts=(
	-name "$(basename "$0").$ins"

	-rtc base=utc,clock=host
	-monitor telnet:127.0.0.1:${telnet_port},server,nowait
	-usb -device usb-kbd -device usb-mouse
	-net nic,macaddr=${vde_mac},id=vde
	-net vde,sock="$vde_path"/link.sock
	-k en-us

	-enable-kvm
	-cpu host
	-smp 2
	-m "$mem"
	"${video[@]}"

	"${root_opts[@]}"

	# -device usb-ehci,id=usb,bus=pci.0,addr=0x4
	# -device usb-host,hostbus=1,hostaddr=3
)

ulimit -c 0
export QEMU_AUDIO_DRV=none

[[ -n "$restore" ]] && qemu_opts+=( -incoming "exec:bsdcat $dst" )

exec cgrc -ru "qemu-ubuntu@$ins" apps-vm \
	-- qemu-system-x86_64 "${qemu_opts[@]}"
