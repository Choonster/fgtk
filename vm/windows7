#!/bin/bash


### Management

root=/mnt/volatiles/vms
dst="$root"/windows7/live.dump
telnet_port=8202
vde_mac=52:54:00:12:34:62
vde_path=~/tmp/vde
dump_inc=
restore=
img=windows7/install.qcow2.inc
net_only=
uid_root=

[[ "$1" = -r || "$1" = --root ]] && { uid_root=t; shift; }
[[ "$1" = -i || "$1" = --img ]] && { img=$(realpath "$2"); shift; shift; }

[[ "$UID" -ne 0 || -n "$uid_root" ]] \
	|| { echo >&2 "ERROR: running as uid=0 but no -r/--root specified"; exit 1; }

case "$1" in
	d|dump)
		[[ "$2" = -i ]] && { dump_inc=-i; shift; }
		[[ -n "$2" ]] && {
			touch "$2" || exit 1
			dst=$(realpath "$2")
		}
		echo "Dumping to: $dst"
		ncat -t 127.0.0.1 "$telnet_port" <<EOF
stop
migrate_set_speed 4g
migrate -d $dump_inc "exec:lzop -c > $dst"
EOF
		echo
		while :; do
			echo 'info migrate' | ncat -t 127.0.0.1 "$telnet_port" |
				grep -aq '^Migration status:[[:space:]]*completed[[:space:]]*$'
			pipe=( "${PIPESTATUS[@]}" )
			[[ ${pipe[0]} -ne 0 || ${pipe[1]} -ne 0 ]] && exit 1
			[[ ${pipe[2]} -eq 0 ]] && {
				echo 'quit' | ncat -t 127.0.0.1 "$telnet_port"
				echo "Done"
				ls -lah "$dst"
				exit 0
			}
			sleep 1 || exit 1
		done ;;

	r|restore)
		[[ -n "$2" ]] && dst=$2
		echo "Restoring from: $dst"
		[[ -f "$dst" ]] || { echo >&2 "FIle not found: $dst"; exit 1; }
		restore=t ;;

	m|monitor) exec rlwrap ncat -t 127.0.0.1 "$telnet_port" ;;
	n|net|net-only) net_only=t ;;

	'') ;;
	*)
		echo >&2 "Usage: $0 [ { d | dump } [path] | { r | restore } [-i] [path] | { m | monitor } | { n | net-only } ]"
		exit 1 ;;
esac

cd "$root"


### Too slow otherwise

err=0
modprobe kvm || exit 1
modprobe kvm-intel 2>/dev/null || (( err += 1 ))
modprobe kvm-amd 2>/dev/null || (( err += 1 ))
[[ "$err" -lt 2 ]] || { echo >&2 "ERROR: failed to load kvm intel/amd modules"; exit 1; }


### VDE

pid1=$$ pid2=$$
mkdir -p "$vde_path"

cgrc -rcu vde && {
	cgrc -ru vde apps-vm -- vde_switch \
		-s "$vde_path"/link.sock -M "$vde_path"/mgmt.sock &
	pid1=$!; }

for n in {0..50}; do
	[[ -e "$vde_path"/link.sock ]] && break
	sleep 0.1
done
[[ $n -eq 50 ]] && { echo >&2 "vde switch startup failed"; exit 1; }

cgrc -rcu vde-tap && {
	cgrc -ru vde-tap apps-vm -- sudo vde_plug2tap \
		-s "$vde_path"/link.sock vde &
	pid2=$!; }

# Add a little delay if vde stuff is just starting
kill -0 "$pid1" "$pid2" || { echo >&2 "ERROR: vde failed to start"; exit 1; }
for n in {0..5}; do
	err=t; ip link show vde &>/dev/null && { err=; break; }
	sleep 0.1
done
[[ -z "$err" ]] || { echo >&2 "ERROR: vde failed to start (no iface)"; exit 1; }

[[ -n "$net_only" ]] && exit 0


### Run qemu

qemu_opts=(
	-name "$(basename "$0")"

	-m 1024
	-rtc base=utc,clock=host
	-monitor telnet:127.0.0.1:${telnet_port},server,nowait
	-net nic,macaddr=${vde_mac},id=vde
	-net vde,sock="$vde_path"/link.sock
	-k en-us

	-enable-kvm
	-cpu host
	-smp 2
	-vga std

	# -chardev pty,id=serialport
	# -device isa-serial,chardev=serialport

	#-cdrom windows7/win7.iso
	-drive file="$img",if=ide,aio=native,cache=writeback,cache.direct=on
)

ulimit -c 0
export QEMU_AUDIO_DRV=none

[[ -n "$restore" ]] && qemu_opts+=( -incoming "exec:bsdcat $dst" )

exec cgrc -ru qemu-linux apps-vm -- qemu-system-x86_64 "${qemu_opts[@]}"
